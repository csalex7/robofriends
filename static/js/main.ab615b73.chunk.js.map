{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","PureComponent","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ab615b73.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('cardlist');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass CounterButton extends Component{\n    constructor(){\n        super();\n        this.state = {\n            count:0\n        }\n    }\n    shouldComponentUpdate(nextProps,nextState){\n        if(this.state.count !== nextState.count){\n            return true;\n        }\n        return false;\n    }\n\n    updateCount= () =>{\n        this.setState(state =>{\n          return {count: this.state.count+1}\n        })\n    }\n\n    render(){\n        console.log('CounterButton');\n       return (\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count} </button>\n       );\n    }\n}\n\nexport default CounterButton;","import React,{PureComponent} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends PureComponent{\n    /*shouldComponentUpdate(nextProps,nextState){\n        return false;\n    }*/\n    render(){\n        console.log('header');\n       return (\n           <div>\n            <h1 className='f1'>RoboFriends</h1>\n            <CounterButton color={'red' }/>\n\n           </div>\n       );\n    }\n}\n\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return{\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField,onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots= () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS,payload: data}))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED,payload: error}))\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from './constants.js'\nimport { \n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch,action={}) => {\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state, {searchField: action.payload} );\n        default:\n            return state;\n    }\n}\nconst initialStateRobots= {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state=initialStateRobots,action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots} from './reducers';\nimport 'tachyons'; \n\nconst logger=createLogger();\n\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store= createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}